/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CreateLebaskarArgs } from "./CreateLebaskarArgs";
import { UpdateLebaskarArgs } from "./UpdateLebaskarArgs";
import { DeleteLebaskarArgs } from "./DeleteLebaskarArgs";
import { LebaskarFindManyArgs } from "./LebaskarFindManyArgs";
import { LebaskarFindUniqueArgs } from "./LebaskarFindUniqueArgs";
import { Lebaskar } from "./Lebaskar";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { LebaskarService } from "../lebaskar.service";

@graphql.Resolver(() => Lebaskar)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LebaskarResolverBase {
  constructor(
    protected readonly service: LebaskarService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "read",
    possession: "any",
  })
  async _lebaskarsMeta(
    @graphql.Args() args: LebaskarFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lebaskar])
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "read",
    possession: "any",
  })
  async lebaskars(
    @graphql.Args() args: LebaskarFindManyArgs
  ): Promise<Lebaskar[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lebaskar, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "read",
    possession: "own",
  })
  async lebaskar(
    @graphql.Args() args: LebaskarFindUniqueArgs
  ): Promise<Lebaskar | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lebaskar)
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "create",
    possession: "any",
  })
  async createLebaskar(
    @graphql.Args() args: CreateLebaskarArgs
  ): Promise<Lebaskar> {
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lebaskar)
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "update",
    possession: "any",
  })
  async updateLebaskar(
    @graphql.Args() args: UpdateLebaskarArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Lebaskar | null> {
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lebaskar)
  @nestAccessControl.UseRoles({
    resource: "Lebaskar",
    action: "delete",
    possession: "any",
  })
  async deleteLebaskar(
    @graphql.Args() args: DeleteLebaskarArgs
  ): Promise<Lebaskar | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order])
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async orders(
    @graphql.Parent() parent: Lebaskar,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
